// Auto-generated by ImageTank, can overwrite using the C++ template gear menu.

#include "structures.h"

//////////////////////////////////////////////////////////////////////////////
//    MyGroup
//////////////////////////////////////////////////////////////////////////////

void MyGroup::pinfo(void) const
{
    pinfoIndent("");
}

void MyGroup::pinfoIndent(std::string pad) const
{
    std::cerr << pad << "Values = "; Values.pinfo();
    std::cerr << pad << "Variation1 = " << Variation1 << std::endl;
}

void MyGroup::WriteStructure(DTDataStorage &output,std::string name)
{
    // Structure for "Values"
    output.Save("Values",name+"_1N");
    output.Save("Path2D Values",name+"_1T");

    // Structure for "Variation1"
    output.Save("Variation1",name+"_2N");
    output.Save("Number",name+"_2T");

    output.Save(2,name+"_N");
    output.Save("MyGroup",name+"_Name");
    output.Save("Group",name);
}

void Write(DTDataStorage &output,std::string name,const MyGroup &var)
{
    Write(output,name+"_Values",var.Values);
    output.Save(var.Variation1,name+"_Variation1");
    Write(output,name,DTDoubleArray());
}

void WriteOne(DTDataStorage &output,std::string name,const MyGroup &var)
{
    Write(output,name,var);
    output.Save("Group","Seq_"+name);
    MyGroup::WriteStructure(output,"SeqInfo_"+name);
}

void Read(DTDataStorage &input,std::string name,MyGroup &var)
{
    Read(input,name+"_Values",var.Values);
    var.Variation1 = input.ReadNumber(name+"_Variation1");
}
