// Auto-generated by ImageTank, can overwrite using the C++ template gear menu.

#include "structures.h"

//////////////////////////////////////////////////////////////////////////////
//    Group
//////////////////////////////////////////////////////////////////////////////

void Group::pinfo(void) const
{
    pinfoIndent("");
}

void Group::pinfoIndent(std::string pad) const
{
    std::cerr << pad << "average = " << average << std::endl;
    std::cerr << pad << "width = " << width << std::endl;
    std::cerr << pad << "histogram = "; histogram.pinfo();
    std::cerr << pad << "fit = "; fit.pinfo();
    std::cerr << pad << "R2 = " << R2 << std::endl;
    std::cerr << pad << "decay = " << decay << std::endl;
    std::cerr << pad << "shift = " << shift << std::endl;
    std::cerr << pad << "Drift = "; Drift.pinfo();
}

void Group::WriteStructure(DTDataStorage &output,std::string name)
{
    // Structure for "average"
    output.Save("average",name+"_1N");
    output.Save("Number",name+"_1T");

    // Structure for "width"
    output.Save("width",name+"_2N");
    output.Save("Number",name+"_2T");

    // Structure for "histogram"
    output.Save("histogram",name+"_3N");
    output.Save("intensity",name+"_3T_1N");
    output.Save("Number",name+"_3T_1T");
    output.Save("count",name+"_3T_2N");
    output.Save("Number",name+"_3T_2T");
    output.Save(2,name+"_3T_N");
    output.Save("Table",name+"_3T");

    // Structure for "fit"
    output.Save("fit",name+"_4N");
    output.Save("Function1D",name+"_4T");

    // Structure for "R2"
    output.Save("R2",name+"_5N");
    output.Save("Number",name+"_5T");

    // Structure for "decay"
    output.Save("decay",name+"_6N");
    output.Save("Number",name+"_6T");

    // Structure for "shift"
    output.Save("shift",name+"_7N");
    output.Save("Number",name+"_7T");

    // Structure for "Drift"
    output.Save("Drift",name+"_8N");
    output.Save("time",name+"_8T_1N");
    output.Save("Number",name+"_8T_1T");
    output.Save("centerSpot",name+"_8T_2N");
    output.Save("Point2D",name+"_8T_2T");
    output.Save(2,name+"_8T_N");
    output.Save("Table",name+"_8T");

    output.Save(8,name+"_N");
    output.Save("Group",name+"_Name");
    output.Save("Group",name);
}

void Write(DTDataStorage &output,std::string name,const Group &var)
{
    output.Save(var.average,name+"_average");
    output.Save(var.width,name+"_width");
    Write(output,name+"_histogram",var.histogram);
    Write(output,name+"_fit",var.fit);
    output.Save(var.R2,name+"_R2");
    output.Save(var.decay,name+"_decay");
    output.Save(var.shift,name+"_shift");
    Write(output,name+"_Drift",var.Drift);
    Write(output,name,DTDoubleArray());
}

void WriteOne(DTDataStorage &output,std::string name,const Group &var)
{
    Write(output,name,var);
    output.Save("Group","Seq_"+name);
    Group::WriteStructure(output,"SeqInfo_"+name);
}

void Read(DTDataStorage &input,std::string name,Group &var)
{
    var.average = input.ReadNumber(name+"_average");
    var.width = input.ReadNumber(name+"_width");
    Read(input,name+"_histogram",var.histogram);
    Read(input,name+"_fit",var.fit);
    var.R2 = input.ReadNumber(name+"_R2");
    var.decay = input.ReadNumber(name+"_decay");
    var.shift = input.ReadNumber(name+"_shift");
    Read(input,name+"_Drift",var.Drift);
}
