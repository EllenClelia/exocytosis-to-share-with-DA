// Auto-generated by ImageTank, can overwrite using the C++ template gear menu.

#include "computation.h"

#include "DTArguments.h"
#include "DTTimer.h"
#include "DTDataFile.h"
#include "DTError.h"

int main(int argc,const char *argv[])
{
    DTSetArguments(argc,argv);

    DTImage image;
    double sigma;

    {
        // Inside a scope so that the input data file will be closed before the computation is called.
        DTDataFile inputDataFile("Input.dtbin",DTFile::ReadOnly);
        if (inputDataFile.IsOpen()==false) {
            std::cerr << "No input file found. Might have to save input for debugging." << std::endl;
        }
        DTDataFile variableDataFile;

        variableDataFile = DTDataFile("image.dtbin",DTFile::ReadOnly);
        Read(variableDataFile,"image",image);
        sigma = inputDataFile.ReadNumber("sigma");
    }

    DTDataFile outputFile("Output.dtbin",DTFile::NewReadWrite);

    DTMutableSet<DTImage> output(outputFile,"Var");
    DoG(image,sigma,output);

    if (DTHowManyErrors()>0) outputFile.Save(DTHowManyErrors(),"ErrorCount"); // For error logging

    {
        // Structure information for the set
        std::string baseName = "SeqInfo_Var";
        std::string eName = baseName+"_E";
        std::string pName = baseName+"_P";

        // Structure for parameters
        outputFile.Save("sigma",pName+"_1N");
        outputFile.Save("Number",pName+"_1T");
        outputFile.Save("octave",pName+"_2N");
        outputFile.Save("Number",pName+"_2T");
        outputFile.Save(2,pName+"_N");

        // Structure for element
        outputFile.Save("field",eName+"_1N");
        outputFile.Save("difference",eName+"_2N");
        outputFile.Save("median",eName+"_3N");
        outputFile.Save(3,eName+"_N");
        outputFile.Save("Image",eName);

        outputFile.Save("Image Set","Seq_Var");
    }
    // To speed up reading.
    outputFile.SaveIndex();

    return 0;
}
