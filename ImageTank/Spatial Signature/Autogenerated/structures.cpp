// Auto-generated by ImageTank, can overwrite using the C++ template gear menu.

#include "structures.h"

//////////////////////////////////////////////////////////////////////////////
//    Group
//////////////////////////////////////////////////////////////////////////////

void Group::pinfo(void) const
{
    pinfoIndent("");
}

void Group::pinfoIndent(std::string pad) const
{
    std::cerr << pad << "values = "; values.pinfo();
    std::cerr << pad << "L = "; L.pinfo();
    std::cerr << pad << "L2 = "; L2.pinfo();
    std::cerr << pad << "pdf = "; pdf.pinfo();
    std::cerr << pad << "sample = "; sample.pinfo();
}

void Group::WriteStructure(DTDataStorage &output,std::string name)
{
    // Structure for "values"
    output.Save("values",name+"_1N");
    output.Save("r",name+"_1T_1N");
    output.Save("Number",name+"_1T_1T");
    output.Save("value",name+"_1T_2N");
    output.Save("Number",name+"_1T_2T");
    output.Save(2,name+"_1T_N");
    output.Save("Table",name+"_1T");

    // Structure for "L"
    output.Save("L",name+"_2N");
    output.Save("r",name+"_2T_1N");
    output.Save("Number",name+"_2T_1T");
    output.Save("L",name+"_2T_2N");
    output.Save("Number",name+"_2T_2T");
    output.Save(2,name+"_2T_N");
    output.Save("Table",name+"_2T");

    // Structure for "L2"
    output.Save("L2",name+"_3N");
    output.Save("r",name+"_3T_1N");
    output.Save("Number",name+"_3T_1T");
    output.Save("L",name+"_3T_2N");
    output.Save("Number",name+"_3T_2T");
    output.Save(2,name+"_3T_N");
    output.Save("Table",name+"_3T");

    // Structure for "pdf"
    output.Save("pdf",name+"_4N");
    output.Save("value",name+"_4T_1N");
    output.Save(1,name+"_4T_N");
    output.Save("Image",name+"_4T");

    // Structure for "sample"
    output.Save("sample",name+"_5N");
    output.Save("xy",name+"_5T_1N");
    output.Save("Point2D",name+"_5T_1T");
    output.Save(1,name+"_5T_N");
    output.Save("Table",name+"_5T");

    output.Save(5,name+"_N");
    output.Save("Group",name+"_Name");
    output.Save("Group",name);
}

void Write(DTDataStorage &output,std::string name,const Group &var)
{
    Write(output,name+"_values",var.values);
    Write(output,name+"_L",var.L);
    Write(output,name+"_L2",var.L2);
    Write(output,name+"_pdf",var.pdf);
    Write(output,name+"_sample",var.sample);
    Write(output,name,DTDoubleArray());
}

void WriteOne(DTDataStorage &output,std::string name,const Group &var)
{
    Write(output,name,var);
    output.Save("Group","Seq_"+name);
    Group::WriteStructure(output,"SeqInfo_"+name);
}

void Read(DTDataStorage &input,std::string name,Group &var)
{
    Read(input,name+"_values",var.values);
    Read(input,name+"_L",var.L);
    Read(input,name+"_L2",var.L2);
    Read(input,name+"_pdf",var.pdf);
    Read(input,name+"_sample",var.sample);
}
